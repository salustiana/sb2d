#!/usr/bin/env python3
import sys

RIGHT = (0, 1)
LEFT = (0, -1)
DOWN = (1, 0)
UP = (-1, 0)

src_mat = list()
mat_w = 0
mat_h = 0
dir = RIGHT
stack = list()
aux_stack = list()
heap = dict()
no_ops = [' ', '=', '|']

def change_dir(d):
    def inner():
        global dir
        dir = d
    return inner

def swap():
    v = stack[-1]
    stack[-1] = stack[-2]
    stack[-2] = v

def save():
    heap[stack.pop()] = stack[-2]

def getchar():
    c = sys.stdin.read(1)
    if c == '':
        stack.append(-1)
    else:
        stack.append(ord(c))

def append_aux():
    global stack, aux_stack

    stack += aux_stack
    aux_stack = list()

actions = {
    ' ': lambda: None,
    '=': lambda: None,
    '|': lambda: None,
    '>': change_dir(RIGHT),
    'v': change_dir(DOWN),
    '<': change_dir(LEFT),
    '^': change_dir(UP),
    '.': lambda: print(chr(stack.pop()), end=""),
    ',': getchar,
    '$': save,
    '@': lambda: stack.append(heap[stack.pop()]),
    '?': lambda: change_dir(UP)() if stack[-1] else change_dir(DOWN)(),
    'T': lambda: change_dir(RIGHT)() if stack[-1] else change_dir(LEFT)(),
    'g': lambda: stack.append(1) if stack[-1] > stack[-2] else stack.append(0),
    'l': lambda: stack.append(1) if stack[-1] < stack[-2] else stack.append(0),
    'e': lambda: stack.append(1) if stack[-1] == stack[-2] else stack.append(0),
    '+': lambda: stack.append(stack.pop() + stack.pop()),
    '-': lambda: (s := stack.pop(), stack.append(stack.pop() - s)),
    '*': lambda: stack.append(stack.pop() * stack.pop()),
    '/': lambda: (d := stack.pop(), stack.append(stack.pop() // d)),
    '%': lambda: (m := stack.pop(), stack.append(stack.pop() % m)),
    ':': lambda: stack.append(stack[-1]),
    's': swap,
    'o': lambda: stack.append(stack[-2]),
    '#': lambda: stack.pop(),
    'r': lambda: stack.append(stack.pop(-3)),
    '}': lambda: aux_stack.append(stack.pop()),
    '{': lambda: stack.append(aux_stack.pop()),
    ';': lambda: stack.append(aux_stack[-1]),
    'A': append_aux,
    'p': lambda: print(f"H: {heap}\nA: {aux_stack}\nS: {stack}\n"),
}

def set_src_mat():
    global src_mat, mat_w, mat_h

    src_lines = list()
    with open(sys.argv[1], "r") as sf:
        for line in sf:
            src_lines.append(line.rstrip("\n"))

    for line in src_lines:
        if len(line) > mat_w:
            mat_w = len(line)

    # paddington
    for line in src_lines:
        if '\t' in line:
            raise Exception("Tabs are perilous")
        src_mat.append(line + ' ' * (mat_w - len(line)))
    mat_h = len(src_mat)


def print_src_mat():
    for row in src_mat:
        for char in row:
            print(f"{char:>3}|", end="")
        print()

def exec_src_mat():
    escaped = False
    in_quotes = False
    in_under = False

    r, c = (0, -1) # >
    while True:
        r += dir[0]
        c += dir[1]
        if r == mat_h or r < 0 or c == mat_w or c < 0:
            sys.exit(stack[-1])
        char = src_mat[r][c]
        if in_quotes:
            if char == '\\':
                if not escaped:
                    escaped = True
                    continue
                stack.append(ord('\\'))
                escaped = False
                continue
            if char == '"':
                if not escaped:
                    in_quotes = False
                    continue
                stack.append(ord('"'))
                escaped = False
                continue
            if char == 'n' and escaped:
                stack.append(ord('\n'))
                escaped = False
                continue
            stack.append(ord(char))
            continue
        if in_under:
            if char == '_':
                in_under = False
                if dir in [RIGHT, DOWN]:
                    stack.append(word)
                else:
                    stack.append(word[::-1])
                continue
            word += char
            continue
        if char == '"':
            in_quotes = True
            continue
        if char == "_":
            in_under = True
            word = ""
            continue
        if char.isdigit():
            stack.append(int(char))
            continue
        actions.get(char, lambda: stack.append(char))()


if __name__ == "__main__":
    if len(sys.argv) == 2:
        set_src_mat()
        exec_src_mat()

    raise Exception(f"Usage: {sys.argv[0]} source_file")
